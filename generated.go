// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// The possible states of a pull request review.
type PullRequestReviewState string

const (
	// A review allowing the pull request to merge.
	PullRequestReviewStateApproved PullRequestReviewState = "APPROVED"
	// A review blocking the pull request from merging.
	PullRequestReviewStateChangesRequested PullRequestReviewState = "CHANGES_REQUESTED"
	// An informational review.
	PullRequestReviewStateCommented PullRequestReviewState = "COMMENTED"
	// A review that has been dismissed.
	PullRequestReviewStateDismissed PullRequestReviewState = "DISMISSED"
	// A review that has not yet been submitted.
	PullRequestReviewStatePending PullRequestReviewState = "PENDING"
)

// __getRepositoryInfoInput is used internally by genqlient
type __getRepositoryInfoInput struct {
	Owner string `json:"owner"`
	Name  string `json:"name"`
}

// GetOwner returns __getRepositoryInfoInput.Owner, and is useful for accessing the field via an interface.
func (v *__getRepositoryInfoInput) GetOwner() string { return v.Owner }

// GetName returns __getRepositoryInfoInput.Name, and is useful for accessing the field via an interface.
func (v *__getRepositoryInfoInput) GetName() string { return v.Name }

// getRepositoryInfoRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getRepositoryInfoRepository struct {
	// A list of pull requests that have been opened in the repository.
	PullRequests *getRepositoryInfoRepositoryPullRequestsPullRequestConnection `json:"pullRequests"`
}

// GetPullRequests returns getRepositoryInfoRepository.PullRequests, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepository) GetPullRequests() *getRepositoryInfoRepositoryPullRequestsPullRequestConnection {
	return v.PullRequests
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnection includes the requested fields of the GraphQL type PullRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequest.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnection struct {
	// A list of nodes.
	Nodes []*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest `json:"nodes"`
}

// GetNodes returns getRepositoryInfoRepositoryPullRequestsPullRequestConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnection) GetNodes() []*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest {
	return v.Nodes
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest struct {
	Id string `json:"id"`
	// Identifies if the pull request is a draft.
	IsDraft bool `json:"isDraft"`
	// The actor who authored the comment.
	Author getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor `json:"-"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
	// A list of latest reviews per user associated with the pull request that are not also pending review.
	LatestReviews *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnection `json:"latestReviews"`
	// Identifies the pull request title.
	Title string `json:"title"`
	// A list of review requests associated with the pull request.
	ReviewRequests *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnection `json:"reviewRequests"`
}

// GetId returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest.Id, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest) GetId() string {
	return v.Id
}

// GetIsDraft returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest.IsDraft, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest) GetIsDraft() bool {
	return v.IsDraft
}

// GetAuthor returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest.Author, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest) GetAuthor() getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor {
	return v.Author
}

// GetCreatedAt returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest.CreatedAt, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetLatestReviews returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest.LatestReviews, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest) GetLatestReviews() *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnection {
	return v.LatestReviews
}

// GetTitle returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest.Title, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest) GetTitle() string {
	return v.Title
}

// GetReviewRequests returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest.ReviewRequests, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest) GetReviewRequests() *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnection {
	return v.ReviewRequests
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest struct {
	Id string `json:"id"`

	IsDraft bool `json:"isDraft"`

	Author json.RawMessage `json:"author"`

	CreatedAt time.Time `json:"createdAt"`

	LatestReviews *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnection `json:"latestReviews"`

	Title string `json:"title"`

	ReviewRequests *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnection `json:"reviewRequests"`
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest) __premarshalJSON() (*__premarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest, error) {
	var retval __premarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest

	retval.Id = v.Id
	retval.IsDraft = v.IsDraft
	{

		dst := &retval.Author
		src := v.Author
		var err error
		*dst, err = __marshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequest.Author: %w", err)
		}
	}
	retval.CreatedAt = v.CreatedAt
	retval.LatestReviews = v.LatestReviews
	retval.Title = v.Title
	retval.ReviewRequests = v.ReviewRequests
	return &retval, nil
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor includes the requested fields of the GraphQL interface Actor.
//
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor is implemented by the following types:
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorBot
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorEnterpriseUserAccount
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorMannequin
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorOrganization
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorUser
// The GraphQL type's documentation follows.
//
// Represents an object which can take actions on GitHub. Typically a User or Bot.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor interface {
	implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetLogin returns the interface-field "login" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The username of the actor.
	GetLogin() string
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorBot) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor() {
}
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorEnterpriseUserAccount) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor() {
}
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorMannequin) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor() {
}
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorOrganization) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor() {
}
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorUser) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor() {
}

func __unmarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor(b []byte, v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Bot":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorBot)
		return json.Unmarshal(b, *v)
	case "EnterpriseUserAccount":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorEnterpriseUserAccount)
		return json.Unmarshal(b, *v)
	case "Mannequin":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorMannequin)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Actor.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor: "%v"`, tn.TypeName)
	}
}

func __marshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor(v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorBot:
		typename = "Bot"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorBot
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorEnterpriseUserAccount:
		typename = "EnterpriseUserAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorEnterpriseUserAccount
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorMannequin:
		typename = "Mannequin"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorMannequin
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorOrganization
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorActor: "%T"`, v)
	}
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorBot includes the requested fields of the GraphQL type Bot.
// The GraphQL type's documentation follows.
//
// A special type of user which takes actions on behalf of GitHub Apps.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorBot struct {
	Typename string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorBot.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorBot) GetTypename() string {
	return v.Typename
}

// GetLogin returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorBot.Login, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorBot) GetLogin() string {
	return v.Login
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorEnterpriseUserAccount includes the requested fields of the GraphQL type EnterpriseUserAccount.
// The GraphQL type's documentation follows.
//
// An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorEnterpriseUserAccount struct {
	Typename string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorEnterpriseUserAccount.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorEnterpriseUserAccount) GetTypename() string {
	return v.Typename
}

// GetLogin returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorEnterpriseUserAccount.Login, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorEnterpriseUserAccount) GetLogin() string {
	return v.Login
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorMannequin includes the requested fields of the GraphQL type Mannequin.
// The GraphQL type's documentation follows.
//
// A placeholder user for attribution of imported data on GitHub.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorMannequin struct {
	Typename string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorMannequin.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorMannequin) GetTypename() string {
	return v.Typename
}

// GetLogin returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorMannequin.Login, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorMannequin) GetLogin() string {
	return v.Login
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorOrganization struct {
	Typename string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorOrganization.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorOrganization) GetTypename() string {
	return v.Typename
}

// GetLogin returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorOrganization.Login, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorOrganization) GetLogin() string {
	return v.Login
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorUser struct {
	Typename string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorUser.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorUser) GetTypename() string {
	return v.Typename
}

// GetLogin returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorUser.Login, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestAuthorUser) GetLogin() string {
	return v.Login
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnection includes the requested fields of the GraphQL type PullRequestReviewConnection.
// The GraphQL type's documentation follows.
//
// The connection type for PullRequestReview.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnection struct {
	// A list of nodes.
	Nodes []*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview `json:"nodes"`
}

// GetNodes returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnection) GetNodes() []*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview {
	return v.Nodes
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview includes the requested fields of the GraphQL type PullRequestReview.
// The GraphQL type's documentation follows.
//
// A review object for a given pull request.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview struct {
	// Identifies the current state of the pull request review.
	State PullRequestReviewState `json:"state"`
	// The actor who authored the comment.
	Author getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor `json:"-"`
}

// GetState returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview.State, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetState() PullRequestReviewState {
	return v.State
}

// GetAuthor returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview.Author, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview) GetAuthor() getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor {
	return v.Author
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview
		Author json.RawMessage `json:"author"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Author
		src := firstPass.Author
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview.Author: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview struct {
	State PullRequestReviewState `json:"state"`

	Author json.RawMessage `json:"author"`
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview) __premarshalJSON() (*__premarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview, error) {
	var retval __premarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview

	retval.State = v.State
	{

		dst := &retval.Author
		src := v.Author
		var err error
		*dst, err = __marshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReview.Author: %w", err)
		}
	}
	return &retval, nil
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor includes the requested fields of the GraphQL interface Actor.
//
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor is implemented by the following types:
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser
// The GraphQL type's documentation follows.
//
// Represents an object which can take actions on GitHub. Typically a User or Bot.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor interface {
	implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
	// GetLogin returns the interface-field "login" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// The username of the actor.
	GetLogin() string
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor() {
}
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor() {
}
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor() {
}
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor() {
}
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor() {
}

func __unmarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor(b []byte, v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Bot":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot)
		return json.Unmarshal(b, *v)
	case "EnterpriseUserAccount":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount)
		return json.Unmarshal(b, *v)
	case "Mannequin":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Actor.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor: "%v"`, tn.TypeName)
	}
}

func __marshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor(v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot:
		typename = "Bot"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount:
		typename = "EnterpriseUserAccount"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin:
		typename = "Mannequin"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorActor: "%T"`, v)
	}
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot includes the requested fields of the GraphQL type Bot.
// The GraphQL type's documentation follows.
//
// A special type of user which takes actions on behalf of GitHub Apps.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot struct {
	Typename string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot) GetTypename() string {
	return v.Typename
}

// GetLogin returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot.Login, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorBot) GetLogin() string {
	return v.Login
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount includes the requested fields of the GraphQL type EnterpriseUserAccount.
// The GraphQL type's documentation follows.
//
// An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount struct {
	Typename string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount) GetTypename() string {
	return v.Typename
}

// GetLogin returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount.Login, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorEnterpriseUserAccount) GetLogin() string {
	return v.Login
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin includes the requested fields of the GraphQL type Mannequin.
// The GraphQL type's documentation follows.
//
// A placeholder user for attribution of imported data on GitHub.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin struct {
	Typename string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin) GetTypename() string {
	return v.Typename
}

// GetLogin returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin.Login, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorMannequin) GetLogin() string {
	return v.Login
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization struct {
	Typename string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization) GetTypename() string {
	return v.Typename
}

// GetLogin returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization.Login, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorOrganization) GetLogin() string {
	return v.Login
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser struct {
	Typename string `json:"__typename"`
	// The username of the actor.
	Login string `json:"login"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser) GetTypename() string {
	return v.Typename
}

// GetLogin returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser.Login, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestLatestReviewsPullRequestReviewConnectionNodesPullRequestReviewAuthorUser) GetLogin() string {
	return v.Login
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnection includes the requested fields of the GraphQL type ReviewRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for ReviewRequest.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnection struct {
	// A list of nodes.
	Nodes []*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest `json:"nodes"`
}

// GetNodes returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnection) GetNodes() []*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest {
	return v.Nodes
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest includes the requested fields of the GraphQL type ReviewRequest.
// The GraphQL type's documentation follows.
//
// A request for a user to review a pull request.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest struct {
	// The reviewer that is requested.
	RequestedReviewer getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer `json:"-"`
}

// GetRequestedReviewer returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest.RequestedReviewer, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest) GetRequestedReviewer() getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer {
	return v.RequestedReviewer
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest
		RequestedReviewer json.RawMessage `json:"requestedReviewer"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.RequestedReviewer
		src := firstPass.RequestedReviewer
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest.RequestedReviewer: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest struct {
	RequestedReviewer json.RawMessage `json:"requestedReviewer"`
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest) __premarshalJSON() (*__premarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest, error) {
	var retval __premarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest

	{

		dst := &retval.RequestedReviewer
		src := v.RequestedReviewer
		var err error
		*dst, err = __marshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequest.RequestedReviewer: %w", err)
		}
	}
	return &retval, nil
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer includes the requested fields of the GraphQL interface RequestedReviewer.
//
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer is implemented by the following types:
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam
// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser
// The GraphQL type's documentation follows.
//
// Types that can be requested reviewers.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer interface {
	implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer() {
}
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer() {
}
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser) implementsGraphQLInterfacegetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer() {
}

func __unmarshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer(b []byte, v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "Mannequin":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin)
		return json.Unmarshal(b, *v)
	case "Team":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RequestedReviewer.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer: "%v"`, tn.TypeName)
	}
}

func __marshalgetRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer(v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin:
		typename = "Mannequin"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam:
		typename = "Team"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewer: "%T"`, v)
	}
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin includes the requested fields of the GraphQL type Mannequin.
// The GraphQL type's documentation follows.
//
// A placeholder user for attribution of imported data on GitHub.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerMannequin) GetTypename() string {
	return v.Typename
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam includes the requested fields of the GraphQL type Team.
// The GraphQL type's documentation follows.
//
// A team of users in an organization.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerTeam) GetTypename() string {
	return v.Typename
}

// getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser struct {
	Typename string `json:"__typename"`
	// The username used to login.
	Login string `json:"login"`
}

// GetTypename returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser) GetTypename() string {
	return v.Typename
}

// GetLogin returns getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser.Login, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoRepositoryPullRequestsPullRequestConnectionNodesPullRequestReviewRequestsReviewRequestConnectionNodesReviewRequestRequestedReviewerUser) GetLogin() string {
	return v.Login
}

// getRepositoryInfoResponse is returned by getRepositoryInfo on success.
type getRepositoryInfoResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository *getRepositoryInfoRepository `json:"repository"`
}

// GetRepository returns getRepositoryInfoResponse.Repository, and is useful for accessing the field via an interface.
func (v *getRepositoryInfoResponse) GetRepository() *getRepositoryInfoRepository { return v.Repository }

func getRepositoryInfo(
	ctx context.Context,
	client graphql.Client,
	owner string,
	name string,
) (*getRepositoryInfoResponse, error) {
	req := &graphql.Request{
		OpName: "getRepositoryInfo",
		Query: `
query getRepositoryInfo ($owner: String!, $name: String!) {
	repository(owner: $owner, name: $name) {
		pullRequests(first: 20, states: OPEN) {
			nodes {
				id
				isDraft
				author {
					__typename
					login
				}
				createdAt
				latestReviews(first: 20) {
					nodes {
						state
						author {
							__typename
							login
						}
					}
				}
				title
				reviewRequests(first: 20) {
					nodes {
						requestedReviewer {
							__typename
							... on User {
								login
							}
						}
					}
				}
			}
		}
	}
}
`,
		Variables: &__getRepositoryInfoInput{
			Owner: owner,
			Name:  name,
		},
	}
	var err error

	var data getRepositoryInfoResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
